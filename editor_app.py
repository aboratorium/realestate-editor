# Streamlit MVP: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
import streamlit as st
import json
import os
import numpy_financial as npf
import pandas as pd
import plotly.express as px
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from io import BytesIO
import copy

st.set_page_config(page_title="–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", layout="wide")

PRESET_PATH = "presets.json"

@st.cache_data
def load_presets():
    if os.path.exists(PRESET_PATH):
        with open(PRESET_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_presets(data):
    with open(PRESET_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

presets = load_presets()

# ================== –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º ==================
st.sidebar.header("–°—Ü–µ–Ω–∞—Ä–∏–∏")

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
unique_scenarios = sorted(set(presets.keys()))

# –°–æ–∑–¥–∞—ë–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
selected = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", 
    unique_scenarios, 
    index=0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
)

# –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
if selected in presets:
    description = presets[selected].get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    st.sidebar.caption(f"üìò {description}")  # –¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è!

# ================== –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è ==================
if selected:
    preset = presets[selected]
    st.subheader(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {selected}")

    bgp = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (BGP, –º¬≤)", value=float(preset["bgp"]))
    discount = st.number_input("–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∞", value=float(preset["discount_rate"]))
    years = st.number_input("–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–ª–µ—Ç)", value=int(preset["years"]))

    mix = st.columns(len(preset["mix"]))
    new_mix = {}
    for i, k in enumerate(preset["mix"]):
        new_mix[k] = mix[i].slider(k, 0.0, 100.0, float(preset["mix"][k]), step=1.0)

    st.markdown("---")
    st.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    parameters = preset.get("parameters", {})
    updated_params = {}

    for fn in parameters:
        st.markdown(f"### {fn}")
        col1, col2, col3 = st.columns(3)
        p = parameters[fn]
        new_p = {}
        for key in p:
            val = col1.number_input(f"{fn} - {key}", value=float(p[key]), key=f"{fn}-{key}")
            new_p[key] = val
        updated_params[fn] = new_p

    st.markdown("---")
    st.subheader("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã (–ø–æ —Ñ–∞–∑–∞–º)")
    
    def phased_cashflow(mix, params):
        capex = sum(bgp * mix[k] / 100 * params.get(k, {}).get("capex", 1000) for k in mix)
        income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("sale_price", 1800) for k in mix)
        lease_income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("lease_price", 0) * 12 * params.get(k, {}).get("noi_margin", 0.2) for k in mix)
        cashflows = [-capex] + [income + lease_income] + [lease_income]*(years-1)
        return {
            "capex": capex,
            "npv": npf.npv(discount, cashflows),
            "irr": npf.irr(cashflows),
            "noi": lease_income,
            "dscr": lease_income / (capex / years),
            "cf": cashflows
        }
    
    result = phased_cashflow(new_mix, updated_params)
    st.write(f"üí∞ CAPEX: ‚Ç¨{result['capex']:,.0f}")
    st.write(f"üìà NPV: ‚Ç¨{result['npv']:,.0f}")
    st.write(f"üìâ IRR: {result['irr']*100:.2f}%")
    st.write(f"üè¢ NOI: ‚Ç¨{result['noi']:,.0f}")
    st.write(f"üìä DSCR: {result['dscr']:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º DataFrame
num_years = years  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞
cashflow = result["cf"]

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç
if len(cashflow) != num_years + 1:  # +1, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∞—Å –Ω–∞—á–∞–ª—å–Ω—ã–π CAPEX
    st.error("–û—à–∏–±–∫–∞: –†–∞–∑–º–µ—Ä –∫—ç—à—Ñ–ª–æ—É –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–µ—Ç.")
    st.write(f"–î–ª–∏–Ω–∞ cashflow: {len(cashflow)}, –û–∂–∏–¥–∞–µ–º–∞—è: {num_years + 1}")
else:
    df_cf = pd.DataFrame({
        "–ì–æ–¥": list(range(0, num_years + 1)),  # –î–æ–±–∞–≤–ª—è–µ–º 0-–π –≥–æ–¥ (CAPEX)
        "Cash Flow (‚Ç¨)": cashflow
    })

    fig_cf = px.bar(df_cf, x="–ì–æ–¥", y="Cash Flow (‚Ç¨)", title="üìä –ö—ç—à—Ñ–ª–æ—É –ø–æ —Ñ–∞–∑–∞–º –ø—Ä–æ–µ–∫—Ç–∞")
    st.plotly_chart(fig_cf)
    
    st.success("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéØ")
