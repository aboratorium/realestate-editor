# Streamlit MVP: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è + –°—Ä–∞–≤–Ω–µ–Ω–∏–µ + –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
import streamlit as st
import json
import os
import numpy_financial as npf
import pandas as pd
import plotly.express as px
from scipy.optimize import minimize

st.set_page_config(page_title="–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", layout="wide")  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–≤—ã–º

PRESET_PATH = "presets.json"

@st.cache_data
def load_presets():
    if os.path.exists(PRESET_PATH):
        with open(PRESET_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_presets(data):
    with open(PRESET_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

presets = load_presets()
preset_names = list(presets.keys())

st.title("üìã –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç–∞")

# ============ –í—ã–±–æ—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ============
st.sidebar.header("–°—Ü–µ–Ω–∞—Ä–∏–∏")
selected = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", preset_names)
compare_selection = st.sidebar.multiselect("–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", preset_names)

if selected:
    preset = presets[selected]
    st.subheader(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {selected}")

    bgp = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (BGP, –º¬≤)", value=float(preset["bgp"]))
    discount = st.number_input("–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∞", value=float(preset["discount_rate"]))
    years = st.number_input("–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–ª–µ—Ç)", value=int(preset["years"]))

    mix = st.columns(len(preset["mix"]))
    new_mix = {}
    for i, k in enumerate(preset["mix"]):
        new_mix[k] = mix[i].slider(k, 0.0, 100.0, float(preset["mix"][k]), step=1.0)

    st.markdown("---")
    st.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    default_params = {
        "Stan": {"capex": 950, "sale_price": 2100, "parking_ratio": 1/100},
        "Hotel": {"capex": 3500, "revpar": 200, "occupancy": 0.5, "noi_margin": 0.25, "parking_ratio": 1/100},
        "Turistiƒçki objekti": {"capex": 1250, "revpar": 95, "occupancy": 0.45, "noi_margin": 0.18, "parking_ratio": 0.8/100},
        "Poslovni prostor": {"capex": 1100, "sale_price": 1800, "lease_price": 14, "noi_margin": 0.23, "parking_ratio": 1/60},
        "Restorani": {"capex": 1200, "lease_price": 18, "noi_margin": 0.28, "parking_ratio": 1/30},
    }
    parameters = preset.get("parameters", default_params)
    updated_params = {}

    for fn in parameters:
        st.markdown(f"### {fn}")
        col1, col2, col3 = st.columns(3)
        p = parameters[fn]
        new_p = {}
        for key in p:
            val = col1.number_input(f"{fn} - {key}", value=float(p[key]), key=f"{fn}-{key}")
            new_p[key] = val
        updated_params[fn] = new_p

    # ============ –†–∞—Å—á—ë—Ç—ã ============
    st.markdown("---")
    st.subheader("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã")

    def calc_metrics(mix, params):
        capex = sum(bgp * mix[k] / 100 * params[k]["capex"] for k in mix)
        income = sum(bgp * mix[k] / 100 * params[k].get("sale_price", 0) for k in mix)
        lease_income = sum(bgp * mix[k] / 100 * params[k].get("lease_price", 0) * 12 * params[k].get("noi_margin", 0) for k in mix)
        op_income = lease_income
        cashflows = [-capex] + [income + lease_income] + [lease_income]*(years-1)
        return {
            "capex": capex,
            "npv": npf.npv(discount, cashflows),
            "irr": npf.irr(cashflows),
            "noi": lease_income,
            "dscr": lease_income / (capex / years),
            "cf": cashflows
        }

    result = calc_metrics(new_mix, updated_params)
    st.write(f"üí∞ CAPEX: ‚Ç¨{result['capex']:,.0f}")
    st.write(f"üìà NPV: ‚Ç¨{result['npv']:,.0f}")
    st.write(f"üìâ IRR: {result['irr']*100:.2f}%")
    st.write(f"üè¢ NOI: ‚Ç¨{result['noi']:,.0f}")
    st.write(f"üìä DSCR: {result['dscr']:.2f}")

    # –ü–∞—Ä–∫–æ–≤–∫–∞
    total_parking = sum(bgp * new_mix[k] / 100 * updated_params[k]["parking_ratio"] for k in new_mix)
    st.write(f"üöó –ü–∞—Ä–∫–æ–≤–∫–∞: –≤—Å–µ–≥–æ {total_parking:.0f} –º–µ—Å—Ç")

    # –ö—ç—à—Ñ–ª–æ—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
    df_cf = pd.DataFrame({"–ì–æ–¥": list(range(years+1)), "Cash Flow (‚Ç¨)": result['cf']})
    fig_cf = px.bar(df_cf, x="–ì–æ–¥", y="Cash Flow (‚Ç¨)", title="–ö—ç—à—Ñ–ª–æ—É –ø–æ –≥–æ–¥–∞–º")
    st.plotly_chart(fig_cf)

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    st.markdown("---")
    st.subheader("üîÅ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ NPV")
    if st.button("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏"):
        def objective(x):
            mix = dict(zip(updated_params.keys(), x))
            return -calc_metrics(mix, updated_params)["npv"]
        cons = ({"type": "eq", "fun": lambda x: sum(x) - 100})
        bounds = [(0, 100)] * len(updated_params)
        init = [100/len(updated_params)] * len(updated_params)
        opt = minimize(objective, init, method="SLSQP", bounds=bounds, constraints=cons)
        if opt.success:
            best_mix = dict(zip(updated_params.keys(), opt.x))
            best_result = calc_metrics(best_mix, updated_params)
            st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.write("**–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**")
            for k, v in best_mix.items():
                st.write(f"- {k}: {v:.1f}%")
            st.write(f"NPV: ‚Ç¨{best_result['npv']:,.0f} | IRR: {best_result['irr']*100:.2f}% | DSCR: {best_result['dscr']:.2f}")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    if compare_selection:
        st.markdown("---")
        st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        df_compare = []
        for name in compare_selection:
            p = presets[name]
            m = calc_metrics(p["mix"], p.get("parameters", default_params))
            df_compare.append({"–°—Ü–µ–Ω–∞—Ä–∏–π": name, "NPV": m["npv"], "IRR": m["irr"]*100, "CAPEX": m["capex"], "DSCR": m["dscr"]})
        df = pd.DataFrame(df_compare)
        st.dataframe(df.style.format({"NPV": "‚Ç¨{:.0f}", "IRR": "{:.2f}%", "CAPEX": "‚Ç¨{:.0f}", "DSCR": "{:.2f}"}))
        fig = px.bar(df, x="–°—Ü–µ–Ω–∞—Ä–∏–π", y="NPV", color="–°—Ü–µ–Ω–∞—Ä–∏–π", title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ NPV")
        st.plotly_chart(fig)

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        presets[selected] = {
            "bgp": bgp,
            "discount_rate": discount,
            "years": years,
            "mix": new_mix,
            "parameters": updated_params
        }
        save_presets(presets)
        st.success("–°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω")
