# Streamlit MVP: –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ NPV
import streamlit as st
import json
import os
import numpy_financial as npf
import pandas as pd
import plotly.express as px
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from io import BytesIO
import copy

st.set_page_config(page_title="–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", layout="wide")

PRESET_PATH = "presets.json"

@st.cache_data
def load_presets():
    if os.path.exists(PRESET_PATH):
        with open(PRESET_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_presets(data):
    with open(PRESET_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

presets = load_presets()

# ========== –ü—Ä–µ–¥—Ä–∞—Å—á—ë—Ç NPV –ø–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º ==========
@st.cache_data
def sorted_scenarios():
    scores = []
    for name, scenario in presets.items():
        mix = scenario["mix"]
        params = scenario.get("parameters", {})
        bgp = scenario["bgp"]
        years = scenario["years"]
        discount = scenario["discount_rate"]

        def quick_cashflow():
            capex = sum(bgp * mix[k] / 100 * params.get(k, {}).get("capex", 1000) for k in mix)
            income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("sale_price", 1800) for k in mix)
            lease_income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("lease_price", 0) * 12 * params.get(k, {}).get("noi_margin", 0.2) for k in mix)
            cashflows = [-capex] + [income + lease_income] + [lease_income]*(years-1)
            return npf.npv(discount, cashflows)

        try:
            score = quick_cashflow()
        except:
            score = 0
        scores.append((name, presets[name].get("description", ""), score))
    scores.sort(key=lambda x: -x[2])
    return scores

# ========== UI –≤—ã–±–æ—Ä ==========
st.sidebar.header("–°—Ü–µ–Ω–∞—Ä–∏–∏")
sorted_presets = sorted_scenarios()
options = [f"{name} ‚Äî NPV: ‚Ç¨{npv:,.0f}" for name, desc, npv in sorted_presets]
selected_label = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", options)
selected = selected_label.split(" ‚Äî ")[0]
compare_selection = st.sidebar.multiselect("–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", [s[0] for s in sorted_presets])

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
if selected in presets:
    desc = presets[selected].get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    st.caption(f"üìò {desc}")

# –î–∞–ª–µ–µ –≤–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∫–∞–∫ –ø—Ä–µ–∂–¥–µ...
# (–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç–æ–≤)
