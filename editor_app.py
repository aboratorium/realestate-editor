# Streamlit MVP: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ UI
import streamlit as st
import json
import os
import numpy_financial as npf
import pandas as pd
import plotly.express as px
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from io import BytesIO
import copy

st.set_page_config(page_title="–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", layout="wide")

PRESET_PATH = "presets.json"

@st.cache_data
def load_presets():
    if os.path.exists(PRESET_PATH):
        with open(PRESET_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_presets(data):
    with open(PRESET_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

presets = load_presets()

# ================== –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ==================
st.sidebar.header("–°—Ü–µ–Ω–∞—Ä–∏–∏")

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Ñ–∞–π–ª
if not presets:
    st.sidebar.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `presets.json` –≤ GitHub.")
else:
    unique_scenarios = sorted(presets.keys())  # –ë–µ—Ä—ë–º –≤—Å–µ –∫–ª—é—á–∏
    selected = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", unique_scenarios, index=0)

    if selected in presets:
        description = presets[selected].get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        st.sidebar.caption(f"üìò {description}")

        st.write(f"### üìä –í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {selected}")
    else:
        st.sidebar.warning("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `presets.json`.")

    # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    description = presets[selected].get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    st.sidebar.caption(f"üìò {description}")

    # ================== –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è ==================
    preset = presets[selected]
    st.subheader(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {selected}")

    bgp = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (BGP, –º¬≤)", value=float(preset["bgp"]))
    discount = st.number_input("–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∞", value=float(preset["discount_rate"]))
    years = st.number_input("–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–ª–µ—Ç)", value=int(preset["years"]))

    mix = st.columns(len(preset["mix"]))
    new_mix = {}
    for i, k in enumerate(preset["mix"]):
        new_mix[k] = mix[i].slider(k, 0.0, 100.0, float(preset["mix"][k]), step=1.0)

    st.markdown("---")
    st.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    parameters = preset.get("parameters", {})
    updated_params = {}

    for fn in parameters:
        st.markdown(f"### {fn}")
        col1, col2, col3 = st.columns(3)
        p = parameters[fn]
        new_p = {}
        for key in p:
            val = col1.number_input(f"{fn} - {key}", value=float(p[key]), key=f"{fn}-{key}")
            new_p[key] = val
        updated_params[fn] = new_p

    st.markdown("---")
    st.subheader("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã (–ø–æ —Ñ–∞–∑–∞–º)")
    
    def phased_cashflow(mix, params):
        capex = sum(bgp * mix[k] / 100 * params.get(k, {}).get("capex", 1000) for k in mix)
        income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("sale_price", 1800) for k in mix)
        lease_income = sum(bgp * mix[k] / 100 * params.get(k, {}).get("lease_price", 0) * 12 * params.get(k, {}).get("noi_margin", 0.2) for k in mix)
        cashflows = [-capex] + [income + lease_income] + [lease_income]*(years-1)
        return {
            "capex": capex,
            "npv": npf.npv(discount, cashflows),
            "irr": npf.irr(cashflows),
            "noi": lease_income,
            "dscr": lease_income / (capex / years),
            "cf": cashflows
        }
    
    result = phased_cashflow(new_mix, updated_params)
    st.write(f"üí∞ CAPEX: ‚Ç¨{result['capex']:,.0f}")
    st.write(f"üìà NPV: ‚Ç¨{result['npv']:,.0f}")
    st.write(f"üìâ IRR: {result['irr']*100:.2f}%")
    st.write(f"üè¢ NOI: ‚Ç¨{result['noi']:,.0f}")
    st.write(f"üìä DSCR: {result['dscr']:.2f}")
    
    if len(result['cf']) == years + 1:
        df_cf = pd.DataFrame({"–ì–æ–¥": list(range(0, years + 1)), "Cash Flow (‚Ç¨)": result['cf']})
        fig_cf = px.bar(df_cf, x="–ì–æ–¥", y="Cash Flow (‚Ç¨)", title="üìä –ö—ç—à—Ñ–ª–æ—É –ø–æ —Ñ–∞–∑–∞–º –ø—Ä–æ–µ–∫—Ç–∞")
        st.plotly_chart(fig_cf)
    else:
        st.error("–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä cashflow –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–µ—Ç.")
    
    st.success("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
